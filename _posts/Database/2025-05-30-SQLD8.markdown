---
layout: post
title: "[SQLD] DB Normalization2"
date: 2025-05-30
category: [SQLD]
---

# 릴레이션 정규화

부주의한 데이터베이스 설계는 제어할 수 없는 데이터 중복을 야기하여 여러가지 갱신 이상(update anomaly)을 유발함<br>
릴레이션 스키마를 **분해함**으로써 중복과 중복으로 인해 발생하는 **갱신이상을 제거하는 작업**

> ⭐ **정규화**란? 주어진 릴레이션 스키마를 함수적 종속성과 기본키를 기반으로 분석하여, 원래의 릴레이션을 분해함으로써 중복과 세 가지 갱신 이상을 최소화함

> ### 🦁**갱신이상 update anomaly**
>
> ➡️ **수정 이상**: 반복된 데이터 중에 일부만 수정하면 데이터의 불일치가 발생<br>
> ➡️ **삽입 이상**: 불필요한 정보를 함께 저장하지 않고는 어떤 정보를 저장하는 것이 불가능<br>
> ➡️ **삭제 이상**: 유용한 정보를 함께 삭제하지 않고는 어떤 정보를 삭제하는 것이 불가능<br>

**릴레이션 분해**는 필요한 경우에 분해된 릴레이션들로부터 원래의 릴레이션을 다시 구할 수 있음을 보장해야 한다는 원칙을 기반으로 함. <br>
**릴레이션 분해**는 릴레이션에 존재하는 **함수적 종속성**에 관한 지식을 기반으로 함<br>

## 관계 데이터베이스 설계의 비공식적인 지침

1. 이해하기 쉽고 명확한 스키마를 만들어라: 여러 엔티티 타입이나 관계 타입에 속한 애트리뷰트들을 하나의 릴레이션에 포함시키지 않음
   ➡️ 하나의 릴레이션은 하나의 엔티티에 속하는 것들로만 구성되는 것이 좋다.
2. null값을 피하라
3. 가짜 tuple이 생기지 않도록 하라
4. 스키마를 정제하라

## 🦕 함수적 종속성

애트리뷰트 A가 애트리뷰트 B의 결정자이면, B가 A에 함수적으로 종속한다고 말한다.<br>
주어진 릴레이션 R에서 애트리뷰트 B가 애트리뷰트 A에 함수적으로 종속하는 필요 충분 조건은 각 A값에 대해 반드시 한 개의 B값이 대응된다는 것.

> 🐾 **결정자**: 어떤 애트리뷰트의 값은 다른 애트리뷰트의 값을 고유하게 결정할 수 있음<br>
> ex. 사원번호는 사원이름을 고유하게 결정하지만 주소는 사원이름을 고유하게 결정하지 못한다. 즉, 사원번호는 사원이름의 결정자이지만 주소는 사원이름의 결정자가 아니다.

### 완전 함수적 종속성 FFD, Full Functional Dependency

속성 A → B (A가 B의 결정자, B가 A에 함수적으로 종속됨)일 때, A의 일부로는 B를 결정할 수 없는 것<br>
여기서 애트리뷰트 A는 복합 애트리뷰트<br>

### 부분 함수적 종속성 PFD, Partial Functional Dependency

완전 함수적 종속성을 만족하지 못하고 복합 애트리뷰트인 A의 일부 키가 B를 결정하는 경우

<img src="/assets/images/250530/FFD PFD.png" alt="FFD and PFD">

### 이행적 함수적 종속성 transitive FD

한 릴레이션의 애트리뷰트 A, B, C가 주어졌을 때 **애트리뷰트 C가 이행적으로 A에 종속한다(A → C)**는 것의 필요 충분 조건은 **A → B & B → C**가 성립하는 것.

## 정규형

### 제1정규형

릴레이션의 모든 애트리뷰트에 반복그룹이 나타나지 않고 원자값만 갖게 되면 제1정규형을 만족한다<br>
1정규형을 만족시키기 위해 반복그룹에 속한 각 값마다 하나의 튜플로 표현하면 되지만 갱신이상(수정이상, 삽입이상, 삭제이상)이 발생할 수 있음<br>
➡️ 갱신이상이 생기는 이유: 기본 키에 대한 부분 함수적 종속성이 릴레이션에 존재하는 경우.
➡️ 부분 함수적 종속성이 존재하는 테이블을 분해해서 별도의 릴레이션을 다시 만들어두면 된다.

### 제2정규형

제1정규형을 만족하면서, 어떤 후보 키에도 속하지 않는 모든 애트리뷰들이 R의 기본 키에 완전하게 함수적으로 종속하는 것. <br>
⭐ 제2정규형은 제1정규형을 만족하면서 부분 함수적 종속성을 제거한 것. **모든 애트리뷰트가 기본 키에 완전하게 함수적으로 종속**<br>
❗기본 키가 두 개 이상의 애트리뷰트로 구성되었을 경우에만 제1정규형이 제2정규형을 만족하는 가를 고려할 필요가 있음<br>
➡️ 갱신이상이 생기는 이유: 릴레이션에 이행적 종속성이 존재하기 때문<br>

### 제3정규형

릴레이션 R이 제2정규형을 만족하면서, 키가 아닌 모든 애트리뷰트가 릴레이션 R의 기본 키에 이행적으로 종속하지 않는 것.<br>
⭐ 제3정규형은 제2정규형이면서 이행적 종속성을 제거한 것. **제2정규형이면서 키가 아닌 모든 애트리뷰트가 기본 키에 직접 종속**

### BCNF

⭐ 제3정규형을 만족하고, 모든 결정자가 후보 키여야 한다
➡️ BCNF 만드는 방법: 제3정규형을 만족하는 릴레이션을 BCNF으로 정규화하려면 키가 아니면서 결정자 역할을 하는 애트리뷰트와 그 결정자에 함수족으로 종속하는 애트리뷰트를 하나의 에팅블에 넣음. 이 릴레이션에서 결정자는 기본 키가 됨.

### 장단점

#### 💗장점

- 정규화 단계가 진행될수록 중복이 감소하고 갱신 이상도 감소됨
- 정규화가 진전될수록 무결성 제약조건을 시행하기 위해 필요한 코드의 양도 감소됨

> 💡정규화를 진행하는 목적이 **데이터베이스 설계에서 중복을 제거하고 데이터의 일관성을 깨는 것을 방지하기 위함**이다.

#### 😓단점

- 작은 릴레이션들로 분해하여 만들어지는 것.
  ➡️ 여러 릴레이션에 걸쳐있는 질의를 하게 된다면 join의 횟수가 늘어나고 소요/수행되는 시간이 늘어나게 됨.

## 역정규화/반정규화 Denormalization

정규화된 데이터를 **일부러 다시 합치거나 중복을 허용하는 과정** <br>
👉 성능 향상 및 쿼리 속도 개선 등 <br>
데이터 중복 및 갱신 이상을 대가로 치르면서 성능상의 요구를 만족시키기도 한다. 많은 데이터베이스 응용에서 검색 질의의 비율이 갱신 질의의 비율보다 훨씬 높음.
