---
layout: post
title: "[SQLD] SQL Function List"
date: 2025-05-31
category: [SQLD]
---

# SQL Function

| 함수         | 사용 형태                             | 내용                                                                   |
| ------------ | ------------------------------------- | ---------------------------------------------------------------------- |
| NVL          | **NVL(A, B)**                         | A가 NULL이면 B, 아니면 A 반환                                          |
| COALESCE     | **COALESCE(A, B)**                    | NULL이 아닌 첫 번째 값을 반환                                          |
| NULLIF       | **NULLIF(A, B)**                      | A와 B가 같으면 NULL 반환, 다르면 A 반환                                |
| VARCHAR2     | **VARCHAR2(20)**                      | 가변 길이 문자 데이터를 저장하는 타입                                  |
| CHAR         | **CHAR(5)**                           | 고정 길이 문자 데이터를 저장하는 타입(길이가 일정, 부족하면 공백 추가) |
| DATE         | **DATE**                              | 날짜(ex. YYYY-MM-DD) 데이터를 저장하는 타입                            |
| NUMBER       | **NUMBER(A, B)**                      | 숫자(정수, 소수 포함)를 저장하는 타입                                  |
| SUBSTR       | **SUBSTR(STRING, A, B)**              | 문자열 STRING에서 특정 위치(A번째)부터 지정한 길이(B)만큼 잘라냄       |
| EXTRACT      | **EXTRACT(A FROM DATE 'YYYY-MM-DD')** | 날짜에서 특정 부분(A = 연, 월, 일 등)을 추출                           |
| CONCAT       | **CONCAT(STR1, STR2)**                | 문자열 2개를 연결/합침                                                 |
| TRIM         | **TRIM(' A B ')**                     | 문자열에서 양쪽 끝 공백 또는 특정 문자 제거                            |
| RANK         | RANK()                                | 중복값은 중복등수, 등수 건너뜀(1위, 1위, 3위, 4위)                     |
| DENSE_RANK() | DENSE_RANK()                          | 중복값은 중복 등수, 등수 안 건너뜀(1위 1위, 2위, 2위)                  |
| ROW_NUMBER() | ROW_NUMBER()                          | 중복값이 있어도 고유 등수 부여(1위, 2위, 3위, 4위)                     |
| ROLLUP       | GROUP BY ROLLUP(A)                    | A 값별 집계와 전체 총계를 만든다.                                      |

```sql
SELECT RNAK OVER(ORDER BY 급여 DESC) AS 순위, 이름, 부서, 직책, 급여
FROM SQLD_43;
```

| JOIN 방식        | 동작 원리                                              | 장점                                 | 단점                                         | 적합한 상황                  |
| ---------------- | ------------------------------------------------------ | ------------------------------------ | -------------------------------------------- | ---------------------------- |
| HASH JOIN        | 작은 테이블에 해시 테이블 생성 → 큰 테이블에서 키 검색 | 대용량 데이터에 빠름, 정렬 필요 없음 | 메모리 사용 많음, 데이터 분포 불균형 시 느림 | 대용량, 정렬 불필요 상황     |
| NESTED LOOP JOIN | 외부 테이블의 각 행마다 내부 테이블 전체 탐색          | 소규모 데이터, 인덱스 활용 가능      | 데이터 양 많을수록 비효율적                  | 소규모 데이터, 인덱스 활용   |
| MERGE JOIN       | 두 테이블 모두 정렬 후 병합                            | 정렬된 데이터에 효율적               | 정렬 필요(추가 비용), 대용량에 부적합        | 양쪽 테이블 모두 정렬된 경우 |
